To get an access token for a Service Principal Name (SPN) in Azure, you can use the `azure-identity` and `azure-mgmt-resource` libraries. Here's how you can do it:

1. **Install the required packages**:
   ```sh
   pip install azure-identity azure-mgmt-resource
   ```

2. **Use the following code to obtain the access token**:

```python
from azure.identity import ClientSecretCredential
from azure.mgmt.resource import SubscriptionClient

# Replace these with your Azure AD details
TENANT_ID = 'your-tenant-id'
CLIENT_ID = 'your-client-id'
CLIENT_SECRET = 'your-client-secret'

# Create a credential object using the ClientSecretCredential class
credential = ClientSecretCredential(
    tenant_id=TENANT_ID,
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET
)

# Get an access token
token = credential.get_token("https://management.azure.com/.default")

# Print the access token
print("Access token:", token.token)

# Optionally, use the token to authenticate and interact with Azure services
subscription_client = SubscriptionClient(credential)
subscriptions = list(subscription_client.subscriptions.list())

for sub in subscriptions:
    print(f"Subscription ID: {sub.subscription_id}")
    print(f"Subscription Name: {sub.display_name}")
```

### Explanation:

1. **Import required modules**: Import the `ClientSecretCredential` class from `azure-identity` and `SubscriptionClient` from `azure-mgmt-resource`.

2. **Define Azure AD details**: Replace `your-tenant-id`, `your-client-id`, and `your-client-secret` with your actual Azure AD tenant ID, client ID, and client secret.

3. **Create a credential object**: Use the `ClientSecretCredential` class to create a credential object.

4. **Get an access token**: Use the `get_token` method of the credential object to obtain an access token. The scope `"https://management.azure.com/.default"` is used to request an access token for the Azure Management API.

5. **Print the access token**: The access token is printed.

6. **Optional - Use the token to interact with Azure services**: You can use the token to authenticate and interact with Azure services. In the example, the `SubscriptionClient` class is used to list subscriptions.

This code snippet will help you get
 an access token for a Service Principal in Azure and use it to interact with Azure services.

........................

import logging
import os
import azure.functions as func
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient

async def get_spn_details():
    key_vault_name = os.environ["KEY_VAULT_NAME"]
    key_vault_uri = f"https://{key_vault_name}.vault.azure.net"

    credential = DefaultAzureCredential()
    client = SecretClient(vault_url=key_vault_uri, credential=credential)

    client_id = client.get_secret("SPNClientId").value
    client_secret = client.get_secret("SPNClientSecret").value
    tenant_id = client.get_secret("SPNTenantId").value

    return {
        "ClientId": client_id,
        "ClientSecret": client_secret,
        "TenantId": tenant_id
    }

async def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')

    spn_details = await get_spn_details()

    client_id = spn_details["ClientId"]
    client_secret = spn_details["ClientSecret"]
    tenant_id = spn_details["TenantId"]

    # Use the client_id, client_secret, and tenant_id for authentication
    # Example: Use these details to authenticate against Azure services
    # credential = ClientSecretCredential(tenant_id, client_id, client_secret)

    return func.HttpResponse(f"SPN details retrieved: Client ID: {client_id}, Tenant ID: {tenant_id}", status_code=200)